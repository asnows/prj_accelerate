-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_get_grads is
port (
    video_in_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    video_in_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    video_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    video_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC;
    video_out_TVALID : OUT STD_LOGIC;
    video_out_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of img_get_grads is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "img_get_grads,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.386250,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=33,HLS_SYN_DSP=70,HLS_SYN_FF=8072,HLS_SYN_LUT=9327}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_srcImg_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Block_proc_U0_srcImg_rows_V_out_write : STD_LOGIC;
    signal Block_proc_U0_srcImg_cols_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal Block_proc_U0_srcImg_cols_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_video_in_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal AXIvideo2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal AXIvideo2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal get_grads_opr_U0_ap_start : STD_LOGIC;
    signal get_grads_opr_U0_ap_done : STD_LOGIC;
    signal get_grads_opr_U0_ap_continue : STD_LOGIC;
    signal get_grads_opr_U0_ap_idle : STD_LOGIC;
    signal get_grads_opr_U0_ap_ready : STD_LOGIC;
    signal get_grads_opr_U0_start_out : STD_LOGIC;
    signal get_grads_opr_U0_start_write : STD_LOGIC;
    signal get_grads_opr_U0_srcImg_rows_V_read : STD_LOGIC;
    signal get_grads_opr_U0_srcImg_cols_V_read : STD_LOGIC;
    signal get_grads_opr_U0_srcImg_data_stream_V_read : STD_LOGIC;
    signal get_grads_opr_U0_dstImg_data_stream_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal get_grads_opr_U0_dstImg_data_stream_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_out_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_U0_video_out_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_video_out_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_video_out_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_video_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_video_out_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal srcImg_rows_V_c_full_n : STD_LOGIC;
    signal srcImg_rows_V_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal srcImg_rows_V_c_empty_n : STD_LOGIC;
    signal srcImg_cols_V_c_full_n : STD_LOGIC;
    signal srcImg_cols_V_c_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal srcImg_cols_V_c_empty_n : STD_LOGIC;
    signal srcImg_data_stream_0_full_n : STD_LOGIC;
    signal srcImg_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal srcImg_data_stream_0_empty_n : STD_LOGIC;
    signal srcImg_rows_V_c6_full_n : STD_LOGIC;
    signal srcImg_rows_V_c6_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal srcImg_rows_V_c6_empty_n : STD_LOGIC;
    signal srcImg_cols_V_c7_full_n : STD_LOGIC;
    signal srcImg_cols_V_c7_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal srcImg_cols_V_c7_empty_n : STD_LOGIC;
    signal dstImg_data_stream_0_full_n : STD_LOGIC;
    signal dstImg_data_stream_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dstImg_data_stream_0_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;
    signal start_for_get_grads_opr_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_get_grads_opr_U0_full_n : STD_LOGIC;
    signal start_for_get_grads_opr_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_get_grads_opr_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        srcImg_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        srcImg_rows_V_out_full_n : IN STD_LOGIC;
        srcImg_rows_V_out_write : OUT STD_LOGIC;
        srcImg_cols_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        srcImg_cols_V_out_full_n : IN STD_LOGIC;
        srcImg_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        video_in_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        video_in_TVALID : IN STD_LOGIC;
        video_in_TREADY : OUT STD_LOGIC;
        video_in_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component get_grads_opr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        srcImg_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        srcImg_rows_V_empty_n : IN STD_LOGIC;
        srcImg_rows_V_read : OUT STD_LOGIC;
        srcImg_cols_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        srcImg_cols_V_empty_n : IN STD_LOGIC;
        srcImg_cols_V_read : OUT STD_LOGIC;
        srcImg_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        srcImg_data_stream_V_empty_n : IN STD_LOGIC;
        srcImg_data_stream_V_read : OUT STD_LOGIC;
        dstImg_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        dstImg_data_stream_V_full_n : IN STD_LOGIC;
        dstImg_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        video_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        video_out_TVALID : OUT STD_LOGIC;
        video_out_TREADY : IN STD_LOGIC;
        video_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        video_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        video_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w10_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w11_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_get_gratde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        srcImg_rows_V_out_din => Block_proc_U0_srcImg_rows_V_out_din,
        srcImg_rows_V_out_full_n => srcImg_rows_V_c_full_n,
        srcImg_rows_V_out_write => Block_proc_U0_srcImg_rows_V_out_write,
        srcImg_cols_V_out_din => Block_proc_U0_srcImg_cols_V_out_din,
        srcImg_cols_V_out_full_n => srcImg_cols_V_c_full_n,
        srcImg_cols_V_out_write => Block_proc_U0_srcImg_cols_V_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_get_grads_opr_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        video_in_TDATA => video_in_TDATA,
        video_in_TVALID => video_in_TVALID,
        video_in_TREADY => AXIvideo2Mat_U0_video_in_TREADY,
        video_in_TKEEP => video_in_TKEEP,
        video_in_TSTRB => video_in_TSTRB,
        video_in_TUSER => video_in_TUSER,
        video_in_TLAST => video_in_TLAST,
        video_in_TID => video_in_TID,
        video_in_TDEST => video_in_TDEST,
        img_rows_V_dout => srcImg_rows_V_c_dout,
        img_rows_V_empty_n => srcImg_rows_V_c_empty_n,
        img_rows_V_read => AXIvideo2Mat_U0_img_rows_V_read,
        img_cols_V_dout => srcImg_cols_V_c_dout,
        img_cols_V_empty_n => srcImg_cols_V_c_empty_n,
        img_cols_V_read => AXIvideo2Mat_U0_img_cols_V_read,
        img_data_stream_V_din => AXIvideo2Mat_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => srcImg_data_stream_0_full_n,
        img_data_stream_V_write => AXIvideo2Mat_U0_img_data_stream_V_write,
        img_rows_V_out_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => srcImg_rows_V_c6_full_n,
        img_rows_V_out_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => srcImg_cols_V_c7_full_n,
        img_cols_V_out_write => AXIvideo2Mat_U0_img_cols_V_out_write);

    get_grads_opr_U0 : component get_grads_opr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => get_grads_opr_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => get_grads_opr_U0_ap_done,
        ap_continue => get_grads_opr_U0_ap_continue,
        ap_idle => get_grads_opr_U0_ap_idle,
        ap_ready => get_grads_opr_U0_ap_ready,
        start_out => get_grads_opr_U0_start_out,
        start_write => get_grads_opr_U0_start_write,
        srcImg_rows_V_dout => srcImg_rows_V_c6_dout,
        srcImg_rows_V_empty_n => srcImg_rows_V_c6_empty_n,
        srcImg_rows_V_read => get_grads_opr_U0_srcImg_rows_V_read,
        srcImg_cols_V_dout => srcImg_cols_V_c7_dout,
        srcImg_cols_V_empty_n => srcImg_cols_V_c7_empty_n,
        srcImg_cols_V_read => get_grads_opr_U0_srcImg_cols_V_read,
        srcImg_data_stream_V_dout => srcImg_data_stream_0_dout,
        srcImg_data_stream_V_empty_n => srcImg_data_stream_0_empty_n,
        srcImg_data_stream_V_read => get_grads_opr_U0_srcImg_data_stream_V_read,
        dstImg_data_stream_V_din => get_grads_opr_U0_dstImg_data_stream_V_din,
        dstImg_data_stream_V_full_n => dstImg_data_stream_0_full_n,
        dstImg_data_stream_V_write => get_grads_opr_U0_dstImg_data_stream_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_V_dout => dstImg_data_stream_0_dout,
        img_data_stream_V_empty_n => dstImg_data_stream_0_empty_n,
        img_data_stream_V_read => Mat2AXIvideo_U0_img_data_stream_V_read,
        video_out_TDATA => Mat2AXIvideo_U0_video_out_TDATA,
        video_out_TVALID => Mat2AXIvideo_U0_video_out_TVALID,
        video_out_TREADY => video_out_TREADY,
        video_out_TKEEP => Mat2AXIvideo_U0_video_out_TKEEP,
        video_out_TSTRB => Mat2AXIvideo_U0_video_out_TSTRB,
        video_out_TUSER => Mat2AXIvideo_U0_video_out_TUSER,
        video_out_TLAST => Mat2AXIvideo_U0_video_out_TLAST,
        video_out_TID => Mat2AXIvideo_U0_video_out_TID,
        video_out_TDEST => Mat2AXIvideo_U0_video_out_TDEST);

    srcImg_rows_V_c_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_srcImg_rows_V_out_din,
        if_full_n => srcImg_rows_V_c_full_n,
        if_write => Block_proc_U0_srcImg_rows_V_out_write,
        if_dout => srcImg_rows_V_c_dout,
        if_empty_n => srcImg_rows_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_rows_V_read);

    srcImg_cols_V_c_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_srcImg_cols_V_out_din,
        if_full_n => srcImg_cols_V_c_full_n,
        if_write => Block_proc_U0_srcImg_cols_V_out_write,
        if_dout => srcImg_cols_V_c_dout,
        if_empty_n => srcImg_cols_V_c_empty_n,
        if_read => AXIvideo2Mat_U0_img_cols_V_read);

    srcImg_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_V_din,
        if_full_n => srcImg_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_V_write,
        if_dout => srcImg_data_stream_0_dout,
        if_empty_n => srcImg_data_stream_0_empty_n,
        if_read => get_grads_opr_U0_srcImg_data_stream_V_read);

    srcImg_rows_V_c6_U : component fifo_w10_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_rows_V_out_din,
        if_full_n => srcImg_rows_V_c6_full_n,
        if_write => AXIvideo2Mat_U0_img_rows_V_out_write,
        if_dout => srcImg_rows_V_c6_dout,
        if_empty_n => srcImg_rows_V_c6_empty_n,
        if_read => get_grads_opr_U0_srcImg_rows_V_read);

    srcImg_cols_V_c7_U : component fifo_w11_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_cols_V_out_din,
        if_full_n => srcImg_cols_V_c7_full_n,
        if_write => AXIvideo2Mat_U0_img_cols_V_out_write,
        if_dout => srcImg_cols_V_c7_dout,
        if_empty_n => srcImg_cols_V_c7_empty_n,
        if_read => get_grads_opr_U0_srcImg_cols_V_read);

    dstImg_data_stream_0_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_grads_opr_U0_dstImg_data_stream_V_din,
        if_full_n => dstImg_data_stream_0_full_n,
        if_write => get_grads_opr_U0_dstImg_data_stream_V_write,
        if_dout => dstImg_data_stream_0_dout,
        if_empty_n => dstImg_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_V_read);

    start_for_get_gratde_U : component start_for_get_gratde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_get_grads_opr_U0_din,
        if_full_n => start_for_get_grads_opr_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_get_grads_opr_U0_dout,
        if_empty_n => start_for_get_grads_opr_U0_empty_n,
        if_read => get_grads_opr_U0_ap_ready);

    start_for_Mat2AXIudo_U : component start_for_Mat2AXIudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => get_grads_opr_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);




    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ap_start;
    Block_proc_U0_ap_continue <= ap_const_logic_1;
    Block_proc_U0_ap_start <= ap_start;
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (get_grads_opr_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Block_proc_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= AXIvideo2Mat_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= AXIvideo2Mat_U0_ap_ready;
    get_grads_opr_U0_ap_continue <= ap_const_logic_1;
    get_grads_opr_U0_ap_start <= start_for_get_grads_opr_U0_empty_n;
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_get_grads_opr_U0_din <= (0=>ap_const_logic_1, others=>'-');
    video_in_TREADY <= AXIvideo2Mat_U0_video_in_TREADY;
    video_out_TDATA <= Mat2AXIvideo_U0_video_out_TDATA;
    video_out_TDEST <= Mat2AXIvideo_U0_video_out_TDEST;
    video_out_TID <= Mat2AXIvideo_U0_video_out_TID;
    video_out_TKEEP <= Mat2AXIvideo_U0_video_out_TKEEP;
    video_out_TLAST <= Mat2AXIvideo_U0_video_out_TLAST;
    video_out_TSTRB <= Mat2AXIvideo_U0_video_out_TSTRB;
    video_out_TUSER <= Mat2AXIvideo_U0_video_out_TUSER;
    video_out_TVALID <= Mat2AXIvideo_U0_video_out_TVALID;
end behav;
