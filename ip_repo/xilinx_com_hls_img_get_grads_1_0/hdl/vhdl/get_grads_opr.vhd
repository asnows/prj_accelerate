-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity get_grads_opr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    srcImg_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    srcImg_rows_V_empty_n : IN STD_LOGIC;
    srcImg_rows_V_read : OUT STD_LOGIC;
    srcImg_cols_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    srcImg_cols_V_empty_n : IN STD_LOGIC;
    srcImg_cols_V_read : OUT STD_LOGIC;
    srcImg_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    srcImg_data_stream_V_empty_n : IN STD_LOGIC;
    srcImg_data_stream_V_read : OUT STD_LOGIC;
    dstImg_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    dstImg_data_stream_V_full_n : IN STD_LOGIC;
    dstImg_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of get_grads_opr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal srcImg_rows_V_blk_n : STD_LOGIC;
    signal srcImg_cols_V_blk_n : STD_LOGIC;
    signal srcImg_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal brmerge_i_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dstImg_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal or_cond_i_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_reg_265 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_83_cast_i_cast_fu_341_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_83_cast_i_cast_reg_639 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_84_cast_i_cast_fu_345_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_84_cast_i_cast_reg_645 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_349_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_reg_650 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_fu_355_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_reg_655 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond1_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_fu_366_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_reg_664 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_86_i_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_i_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_674 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_87_i_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_87_i_reg_684 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_87_i_reg_684_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_691_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_691_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_416_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_89_i_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_reg_700 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_reg_700_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_reg_700_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_A_val_1_addr_reg_707 : STD_LOGIC_VECTOR (9 downto 0);
    signal brmerge_i_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_reg_718_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_723_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_728_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_92_i_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_92_i_reg_737 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pown_generic_float_s_fu_276_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pown_generic_float_s_fu_295_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Temp_f_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Temp_f2_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal buff_A_val_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_0_ce0 : STD_LOGIC;
    signal buff_A_val_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_val_0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_0_ce1 : STD_LOGIC;
    signal buff_A_val_0_we1 : STD_LOGIC;
    signal buff_A_val_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_1_ce0 : STD_LOGIC;
    signal buff_A_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_val_1_ce1 : STD_LOGIC;
    signal buff_A_val_1_we1 : STD_LOGIC;
    signal buff_A_val_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_2_ce0 : STD_LOGIC;
    signal buff_A_val_2_we0 : STD_LOGIC;
    signal buff_A_val_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal buff_A_val_2_ce1 : STD_LOGIC;
    signal buff_A_val_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pown_generic_float_s_fu_276_ap_start : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_276_ap_done : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_276_ap_idle : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_276_ap_ready : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_276_ap_ce : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_295_ap_start : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_295_ap_done : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_295_ap_idle : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_295_ap_ready : STD_LOGIC;
    signal grp_pown_generic_float_s_fu_295_ap_ce : STD_LOGIC;
    signal row_i_reg_254 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_pown_generic_float_s_fu_276_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pown_generic_float_s_fu_295_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal buff_C_val_1_0_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_0_0_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_0_0_1_fu_539_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_1_1_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_1_0_1_fu_489_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_1_1_1_fu_146 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_2_0_2_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_2_0_1_fu_532_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_C_val_0_0_2_fu_154 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_324_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_V_fu_337_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal rows_V_fu_333_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ult_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_389_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ult1_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_443_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_99_i_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_cast_i_fu_496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_91_cast_i_fu_500_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_93_cast_i_fu_550_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_94_cast_i_fu_554_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_95_i_fu_558_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal brmerge1_i_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_314_ce : STD_LOGIC;
    signal grp_fu_320_ce : STD_LOGIC;
    signal grp_fu_324_ce : STD_LOGIC;
    signal grp_fu_328_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component pown_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component img_get_grads_fadqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component img_get_grads_sitrcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component img_get_grads_fsqsc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component get_grads_opr_bufncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component get_grads_opr_bufpcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buff_A_val_0_U : component get_grads_opr_bufncg
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_A_val_0_address0,
        ce0 => buff_A_val_0_ce0,
        q0 => buff_A_val_0_q0,
        address1 => buff_A_val_0_address1,
        ce1 => buff_A_val_0_ce1,
        we1 => buff_A_val_0_we1,
        d1 => srcImg_data_stream_V_dout);

    buff_A_val_1_U : component get_grads_opr_bufncg
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_A_val_1_address0,
        ce0 => buff_A_val_1_ce0,
        q0 => buff_A_val_1_q0,
        address1 => buff_A_val_1_addr_reg_707,
        ce1 => buff_A_val_1_ce1,
        we1 => buff_A_val_1_we1,
        d1 => buff_A_val_0_q0);

    buff_A_val_2_U : component get_grads_opr_bufpcA
    generic map (
        DataWidth => 8,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_A_val_2_address0,
        ce0 => buff_A_val_2_ce0,
        we0 => buff_A_val_2_we0,
        d0 => buff_A_val_1_q0,
        address1 => buff_A_val_2_address1,
        ce1 => buff_A_val_2_ce1,
        q1 => buff_A_val_2_q1);

    grp_pown_generic_float_s_fu_276 : component pown_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pown_generic_float_s_fu_276_ap_start,
        ap_done => grp_pown_generic_float_s_fu_276_ap_done,
        ap_idle => grp_pown_generic_float_s_fu_276_ap_idle,
        ap_ready => grp_pown_generic_float_s_fu_276_ap_ready,
        ap_ce => grp_pown_generic_float_s_fu_276_ap_ce,
        base_r => grp_fu_320_p1,
        ap_return => grp_pown_generic_float_s_fu_276_ap_return);

    grp_pown_generic_float_s_fu_295 : component pown_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pown_generic_float_s_fu_295_ap_start,
        ap_done => grp_pown_generic_float_s_fu_295_ap_done,
        ap_idle => grp_pown_generic_float_s_fu_295_ap_idle,
        ap_ready => grp_pown_generic_float_s_fu_295_ap_ready,
        ap_ce => grp_pown_generic_float_s_fu_295_ap_ce,
        base_r => grp_fu_324_p1,
        ap_return => grp_pown_generic_float_s_fu_295_ap_return);

    img_get_grads_fadqcK_U33 : component img_get_grads_fadqcK
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_pown_generic_float_s_fu_276_ap_return,
        din1 => grp_pown_generic_float_s_fu_295_ap_return,
        ce => grp_fu_314_ce,
        dout => grp_fu_314_p2);

    img_get_grads_sitrcU_U34 : component img_get_grads_sitrcU
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_320_p0,
        ce => grp_fu_320_ce,
        dout => grp_fu_320_p1);

    img_get_grads_sitrcU_U35 : component img_get_grads_sitrcU
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_324_p0,
        ce => grp_fu_324_ce,
        dout => grp_fu_324_p1);

    img_get_grads_fsqsc4_U36 : component img_get_grads_fsqsc4
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => Temp_f_reg_762,
        ce => grp_fu_328_ce,
        dout => grp_fu_328_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond1_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                elsif (((exitcond1_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_pown_generic_float_s_fu_276_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pown_generic_float_s_fu_276_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_pown_generic_float_s_fu_276_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pown_generic_float_s_fu_276_ap_ready = ap_const_logic_1)) then 
                    grp_pown_generic_float_s_fu_276_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pown_generic_float_s_fu_295_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pown_generic_float_s_fu_295_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_pown_generic_float_s_fu_295_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pown_generic_float_s_fu_295_ap_ready = ap_const_logic_1)) then 
                    grp_pown_generic_float_s_fu_295_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_411_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_265 <= col_fu_416_p2;
            elsif (((exitcond1_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_assign_reg_265 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    row_i_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                row_i_reg_254 <= row_reg_664;
            elsif ((not(((srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_i_reg_254 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Temp_f2_reg_767 <= grp_fu_328_p2;
                Temp_f_reg_762 <= grp_fu_314_p2;
                brmerge_i_reg_718_pp0_iter10_reg <= brmerge_i_reg_718_pp0_iter9_reg;
                brmerge_i_reg_718_pp0_iter11_reg <= brmerge_i_reg_718_pp0_iter10_reg;
                brmerge_i_reg_718_pp0_iter12_reg <= brmerge_i_reg_718_pp0_iter11_reg;
                brmerge_i_reg_718_pp0_iter13_reg <= brmerge_i_reg_718_pp0_iter12_reg;
                brmerge_i_reg_718_pp0_iter14_reg <= brmerge_i_reg_718_pp0_iter13_reg;
                brmerge_i_reg_718_pp0_iter15_reg <= brmerge_i_reg_718_pp0_iter14_reg;
                brmerge_i_reg_718_pp0_iter16_reg <= brmerge_i_reg_718_pp0_iter15_reg;
                brmerge_i_reg_718_pp0_iter17_reg <= brmerge_i_reg_718_pp0_iter16_reg;
                brmerge_i_reg_718_pp0_iter18_reg <= brmerge_i_reg_718_pp0_iter17_reg;
                brmerge_i_reg_718_pp0_iter19_reg <= brmerge_i_reg_718_pp0_iter18_reg;
                brmerge_i_reg_718_pp0_iter20_reg <= brmerge_i_reg_718_pp0_iter19_reg;
                brmerge_i_reg_718_pp0_iter21_reg <= brmerge_i_reg_718_pp0_iter20_reg;
                brmerge_i_reg_718_pp0_iter22_reg <= brmerge_i_reg_718_pp0_iter21_reg;
                brmerge_i_reg_718_pp0_iter23_reg <= brmerge_i_reg_718_pp0_iter22_reg;
                brmerge_i_reg_718_pp0_iter24_reg <= brmerge_i_reg_718_pp0_iter23_reg;
                brmerge_i_reg_718_pp0_iter25_reg <= brmerge_i_reg_718_pp0_iter24_reg;
                brmerge_i_reg_718_pp0_iter26_reg <= brmerge_i_reg_718_pp0_iter25_reg;
                brmerge_i_reg_718_pp0_iter27_reg <= brmerge_i_reg_718_pp0_iter26_reg;
                brmerge_i_reg_718_pp0_iter28_reg <= brmerge_i_reg_718_pp0_iter27_reg;
                brmerge_i_reg_718_pp0_iter29_reg <= brmerge_i_reg_718_pp0_iter28_reg;
                brmerge_i_reg_718_pp0_iter2_reg <= brmerge_i_reg_718_pp0_iter1_reg;
                brmerge_i_reg_718_pp0_iter30_reg <= brmerge_i_reg_718_pp0_iter29_reg;
                brmerge_i_reg_718_pp0_iter31_reg <= brmerge_i_reg_718_pp0_iter30_reg;
                brmerge_i_reg_718_pp0_iter32_reg <= brmerge_i_reg_718_pp0_iter31_reg;
                brmerge_i_reg_718_pp0_iter33_reg <= brmerge_i_reg_718_pp0_iter32_reg;
                brmerge_i_reg_718_pp0_iter34_reg <= brmerge_i_reg_718_pp0_iter33_reg;
                brmerge_i_reg_718_pp0_iter35_reg <= brmerge_i_reg_718_pp0_iter34_reg;
                brmerge_i_reg_718_pp0_iter36_reg <= brmerge_i_reg_718_pp0_iter35_reg;
                brmerge_i_reg_718_pp0_iter37_reg <= brmerge_i_reg_718_pp0_iter36_reg;
                brmerge_i_reg_718_pp0_iter38_reg <= brmerge_i_reg_718_pp0_iter37_reg;
                brmerge_i_reg_718_pp0_iter39_reg <= brmerge_i_reg_718_pp0_iter38_reg;
                brmerge_i_reg_718_pp0_iter3_reg <= brmerge_i_reg_718_pp0_iter2_reg;
                brmerge_i_reg_718_pp0_iter40_reg <= brmerge_i_reg_718_pp0_iter39_reg;
                brmerge_i_reg_718_pp0_iter41_reg <= brmerge_i_reg_718_pp0_iter40_reg;
                brmerge_i_reg_718_pp0_iter42_reg <= brmerge_i_reg_718_pp0_iter41_reg;
                brmerge_i_reg_718_pp0_iter43_reg <= brmerge_i_reg_718_pp0_iter42_reg;
                brmerge_i_reg_718_pp0_iter44_reg <= brmerge_i_reg_718_pp0_iter43_reg;
                brmerge_i_reg_718_pp0_iter45_reg <= brmerge_i_reg_718_pp0_iter44_reg;
                brmerge_i_reg_718_pp0_iter4_reg <= brmerge_i_reg_718_pp0_iter3_reg;
                brmerge_i_reg_718_pp0_iter5_reg <= brmerge_i_reg_718_pp0_iter4_reg;
                brmerge_i_reg_718_pp0_iter6_reg <= brmerge_i_reg_718_pp0_iter5_reg;
                brmerge_i_reg_718_pp0_iter7_reg <= brmerge_i_reg_718_pp0_iter6_reg;
                brmerge_i_reg_718_pp0_iter8_reg <= brmerge_i_reg_718_pp0_iter7_reg;
                brmerge_i_reg_718_pp0_iter9_reg <= brmerge_i_reg_718_pp0_iter8_reg;
                exitcond_reg_691_pp0_iter2_reg <= exitcond_reg_691_pp0_iter1_reg;
                icmp1_reg_723_pp0_iter10_reg <= icmp1_reg_723_pp0_iter9_reg;
                icmp1_reg_723_pp0_iter11_reg <= icmp1_reg_723_pp0_iter10_reg;
                icmp1_reg_723_pp0_iter12_reg <= icmp1_reg_723_pp0_iter11_reg;
                icmp1_reg_723_pp0_iter13_reg <= icmp1_reg_723_pp0_iter12_reg;
                icmp1_reg_723_pp0_iter14_reg <= icmp1_reg_723_pp0_iter13_reg;
                icmp1_reg_723_pp0_iter15_reg <= icmp1_reg_723_pp0_iter14_reg;
                icmp1_reg_723_pp0_iter16_reg <= icmp1_reg_723_pp0_iter15_reg;
                icmp1_reg_723_pp0_iter17_reg <= icmp1_reg_723_pp0_iter16_reg;
                icmp1_reg_723_pp0_iter18_reg <= icmp1_reg_723_pp0_iter17_reg;
                icmp1_reg_723_pp0_iter19_reg <= icmp1_reg_723_pp0_iter18_reg;
                icmp1_reg_723_pp0_iter20_reg <= icmp1_reg_723_pp0_iter19_reg;
                icmp1_reg_723_pp0_iter21_reg <= icmp1_reg_723_pp0_iter20_reg;
                icmp1_reg_723_pp0_iter22_reg <= icmp1_reg_723_pp0_iter21_reg;
                icmp1_reg_723_pp0_iter23_reg <= icmp1_reg_723_pp0_iter22_reg;
                icmp1_reg_723_pp0_iter24_reg <= icmp1_reg_723_pp0_iter23_reg;
                icmp1_reg_723_pp0_iter25_reg <= icmp1_reg_723_pp0_iter24_reg;
                icmp1_reg_723_pp0_iter26_reg <= icmp1_reg_723_pp0_iter25_reg;
                icmp1_reg_723_pp0_iter27_reg <= icmp1_reg_723_pp0_iter26_reg;
                icmp1_reg_723_pp0_iter28_reg <= icmp1_reg_723_pp0_iter27_reg;
                icmp1_reg_723_pp0_iter29_reg <= icmp1_reg_723_pp0_iter28_reg;
                icmp1_reg_723_pp0_iter2_reg <= icmp1_reg_723_pp0_iter1_reg;
                icmp1_reg_723_pp0_iter30_reg <= icmp1_reg_723_pp0_iter29_reg;
                icmp1_reg_723_pp0_iter31_reg <= icmp1_reg_723_pp0_iter30_reg;
                icmp1_reg_723_pp0_iter32_reg <= icmp1_reg_723_pp0_iter31_reg;
                icmp1_reg_723_pp0_iter33_reg <= icmp1_reg_723_pp0_iter32_reg;
                icmp1_reg_723_pp0_iter34_reg <= icmp1_reg_723_pp0_iter33_reg;
                icmp1_reg_723_pp0_iter35_reg <= icmp1_reg_723_pp0_iter34_reg;
                icmp1_reg_723_pp0_iter36_reg <= icmp1_reg_723_pp0_iter35_reg;
                icmp1_reg_723_pp0_iter37_reg <= icmp1_reg_723_pp0_iter36_reg;
                icmp1_reg_723_pp0_iter38_reg <= icmp1_reg_723_pp0_iter37_reg;
                icmp1_reg_723_pp0_iter39_reg <= icmp1_reg_723_pp0_iter38_reg;
                icmp1_reg_723_pp0_iter3_reg <= icmp1_reg_723_pp0_iter2_reg;
                icmp1_reg_723_pp0_iter40_reg <= icmp1_reg_723_pp0_iter39_reg;
                icmp1_reg_723_pp0_iter41_reg <= icmp1_reg_723_pp0_iter40_reg;
                icmp1_reg_723_pp0_iter42_reg <= icmp1_reg_723_pp0_iter41_reg;
                icmp1_reg_723_pp0_iter43_reg <= icmp1_reg_723_pp0_iter42_reg;
                icmp1_reg_723_pp0_iter44_reg <= icmp1_reg_723_pp0_iter43_reg;
                icmp1_reg_723_pp0_iter45_reg <= icmp1_reg_723_pp0_iter44_reg;
                icmp1_reg_723_pp0_iter4_reg <= icmp1_reg_723_pp0_iter3_reg;
                icmp1_reg_723_pp0_iter5_reg <= icmp1_reg_723_pp0_iter4_reg;
                icmp1_reg_723_pp0_iter6_reg <= icmp1_reg_723_pp0_iter5_reg;
                icmp1_reg_723_pp0_iter7_reg <= icmp1_reg_723_pp0_iter6_reg;
                icmp1_reg_723_pp0_iter8_reg <= icmp1_reg_723_pp0_iter7_reg;
                icmp1_reg_723_pp0_iter9_reg <= icmp1_reg_723_pp0_iter8_reg;
                or_cond_i_reg_728_pp0_iter10_reg <= or_cond_i_reg_728_pp0_iter9_reg;
                or_cond_i_reg_728_pp0_iter11_reg <= or_cond_i_reg_728_pp0_iter10_reg;
                or_cond_i_reg_728_pp0_iter12_reg <= or_cond_i_reg_728_pp0_iter11_reg;
                or_cond_i_reg_728_pp0_iter13_reg <= or_cond_i_reg_728_pp0_iter12_reg;
                or_cond_i_reg_728_pp0_iter14_reg <= or_cond_i_reg_728_pp0_iter13_reg;
                or_cond_i_reg_728_pp0_iter15_reg <= or_cond_i_reg_728_pp0_iter14_reg;
                or_cond_i_reg_728_pp0_iter16_reg <= or_cond_i_reg_728_pp0_iter15_reg;
                or_cond_i_reg_728_pp0_iter17_reg <= or_cond_i_reg_728_pp0_iter16_reg;
                or_cond_i_reg_728_pp0_iter18_reg <= or_cond_i_reg_728_pp0_iter17_reg;
                or_cond_i_reg_728_pp0_iter19_reg <= or_cond_i_reg_728_pp0_iter18_reg;
                or_cond_i_reg_728_pp0_iter20_reg <= or_cond_i_reg_728_pp0_iter19_reg;
                or_cond_i_reg_728_pp0_iter21_reg <= or_cond_i_reg_728_pp0_iter20_reg;
                or_cond_i_reg_728_pp0_iter22_reg <= or_cond_i_reg_728_pp0_iter21_reg;
                or_cond_i_reg_728_pp0_iter23_reg <= or_cond_i_reg_728_pp0_iter22_reg;
                or_cond_i_reg_728_pp0_iter24_reg <= or_cond_i_reg_728_pp0_iter23_reg;
                or_cond_i_reg_728_pp0_iter25_reg <= or_cond_i_reg_728_pp0_iter24_reg;
                or_cond_i_reg_728_pp0_iter26_reg <= or_cond_i_reg_728_pp0_iter25_reg;
                or_cond_i_reg_728_pp0_iter27_reg <= or_cond_i_reg_728_pp0_iter26_reg;
                or_cond_i_reg_728_pp0_iter28_reg <= or_cond_i_reg_728_pp0_iter27_reg;
                or_cond_i_reg_728_pp0_iter29_reg <= or_cond_i_reg_728_pp0_iter28_reg;
                or_cond_i_reg_728_pp0_iter2_reg <= or_cond_i_reg_728_pp0_iter1_reg;
                or_cond_i_reg_728_pp0_iter30_reg <= or_cond_i_reg_728_pp0_iter29_reg;
                or_cond_i_reg_728_pp0_iter31_reg <= or_cond_i_reg_728_pp0_iter30_reg;
                or_cond_i_reg_728_pp0_iter32_reg <= or_cond_i_reg_728_pp0_iter31_reg;
                or_cond_i_reg_728_pp0_iter33_reg <= or_cond_i_reg_728_pp0_iter32_reg;
                or_cond_i_reg_728_pp0_iter34_reg <= or_cond_i_reg_728_pp0_iter33_reg;
                or_cond_i_reg_728_pp0_iter35_reg <= or_cond_i_reg_728_pp0_iter34_reg;
                or_cond_i_reg_728_pp0_iter36_reg <= or_cond_i_reg_728_pp0_iter35_reg;
                or_cond_i_reg_728_pp0_iter37_reg <= or_cond_i_reg_728_pp0_iter36_reg;
                or_cond_i_reg_728_pp0_iter38_reg <= or_cond_i_reg_728_pp0_iter37_reg;
                or_cond_i_reg_728_pp0_iter39_reg <= or_cond_i_reg_728_pp0_iter38_reg;
                or_cond_i_reg_728_pp0_iter3_reg <= or_cond_i_reg_728_pp0_iter2_reg;
                or_cond_i_reg_728_pp0_iter40_reg <= or_cond_i_reg_728_pp0_iter39_reg;
                or_cond_i_reg_728_pp0_iter41_reg <= or_cond_i_reg_728_pp0_iter40_reg;
                or_cond_i_reg_728_pp0_iter42_reg <= or_cond_i_reg_728_pp0_iter41_reg;
                or_cond_i_reg_728_pp0_iter43_reg <= or_cond_i_reg_728_pp0_iter42_reg;
                or_cond_i_reg_728_pp0_iter44_reg <= or_cond_i_reg_728_pp0_iter43_reg;
                or_cond_i_reg_728_pp0_iter45_reg <= or_cond_i_reg_728_pp0_iter44_reg;
                or_cond_i_reg_728_pp0_iter4_reg <= or_cond_i_reg_728_pp0_iter3_reg;
                or_cond_i_reg_728_pp0_iter5_reg <= or_cond_i_reg_728_pp0_iter4_reg;
                or_cond_i_reg_728_pp0_iter6_reg <= or_cond_i_reg_728_pp0_iter5_reg;
                or_cond_i_reg_728_pp0_iter7_reg <= or_cond_i_reg_728_pp0_iter6_reg;
                or_cond_i_reg_728_pp0_iter8_reg <= or_cond_i_reg_728_pp0_iter7_reg;
                or_cond_i_reg_728_pp0_iter9_reg <= or_cond_i_reg_728_pp0_iter8_reg;
                tmp_89_i_reg_700_pp0_iter2_reg <= tmp_89_i_reg_700_pp0_iter1_reg;
                tmp_92_i_reg_737 <= tmp_92_i_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                brmerge_i_reg_718 <= brmerge_i_fu_438_p2;
                icmp1_reg_723 <= icmp1_fu_453_p2;
                or_cond_i_reg_728 <= or_cond_i_fu_465_p2;
                tmp_89_i_reg_700 <= tmp_89_i_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                brmerge_i_reg_718_pp0_iter1_reg <= brmerge_i_reg_718;
                exitcond_reg_691 <= exitcond_fu_411_p2;
                exitcond_reg_691_pp0_iter1_reg <= exitcond_reg_691;
                icmp1_reg_723_pp0_iter1_reg <= icmp1_reg_723;
                or_cond_i_reg_728_pp0_iter1_reg <= or_cond_i_reg_728;
                    tmp_87_i_reg_684(12 downto 0) <= tmp_87_i_fu_405_p1(12 downto 0);
                    tmp_87_i_reg_684_pp0_iter1_reg(12 downto 0) <= tmp_87_i_reg_684(12 downto 0);
                tmp_89_i_reg_700_pp0_iter1_reg <= tmp_89_i_reg_700;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_89_i_fu_422_p2 = ap_const_lv1_1) and (exitcond_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buff_A_val_1_addr_reg_707 <= tmp_87_i_fu_405_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge_i_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buff_C_val_0_0_2_fu_154 <= srcImg_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_691_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buff_C_val_0_0_fu_138 <= buff_C_val_0_0_1_fu_539_p3;
                buff_C_val_2_0_2_fu_150 <= buff_C_val_2_0_1_fu_532_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_89_i_reg_700 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buff_C_val_1_0_fu_134 <= buff_A_val_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_691_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buff_C_val_1_1_1_fu_146 <= buff_C_val_1_1_fu_142;
                buff_C_val_1_1_fu_142 <= buff_C_val_1_0_1_fu_489_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_reg_679 <= icmp_fu_399_p2;
                rev_reg_674 <= rev_fu_383_p2;
                tmp_86_i_reg_669 <= tmp_86_i_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_reg_664 <= row_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_4_reg_650 <= tmp_4_fu_349_p2;
                tmp_7_reg_655 <= tmp_7_fu_355_p2;
                    tmp_83_cast_i_cast_reg_639(11 downto 0) <= tmp_83_cast_i_cast_fu_341_p1(11 downto 0);
                    tmp_84_cast_i_cast_reg_645(11 downto 0) <= tmp_84_cast_i_cast_fu_345_p1(11 downto 0);
            end if;
        end if;
    end process;
    tmp_83_cast_i_cast_reg_639(12) <= '0';
    tmp_84_cast_i_cast_reg_645(12) <= '0';
    tmp_87_i_reg_684(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    tmp_87_i_reg_684_pp0_iter1_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, srcImg_rows_V_empty_n, srcImg_cols_V_empty_n, ap_enable_reg_pp0_iter46, exitcond1_fu_361_p2, ap_CS_fsm_state2, exitcond_fu_411_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter45)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_411_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1)) or ((exitcond_fu_411_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state50 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(srcImg_data_stream_V_empty_n, dstImg_data_stream_V_full_n, ap_enable_reg_pp0_iter2, brmerge_i_reg_718_pp0_iter1_reg, ap_enable_reg_pp0_iter46, or_cond_i_reg_728_pp0_iter45_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((or_cond_i_reg_728_pp0_iter45_reg = ap_const_lv1_1) and (dstImg_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1)) or ((brmerge_i_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(srcImg_data_stream_V_empty_n, dstImg_data_stream_V_full_n, ap_enable_reg_pp0_iter2, brmerge_i_reg_718_pp0_iter1_reg, ap_enable_reg_pp0_iter46, or_cond_i_reg_728_pp0_iter45_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((or_cond_i_reg_728_pp0_iter45_reg = ap_const_lv1_1) and (dstImg_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1)) or ((brmerge_i_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(srcImg_data_stream_V_empty_n, dstImg_data_stream_V_full_n, ap_enable_reg_pp0_iter2, brmerge_i_reg_718_pp0_iter1_reg, ap_enable_reg_pp0_iter46, or_cond_i_reg_728_pp0_iter45_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((or_cond_i_reg_728_pp0_iter45_reg = ap_const_lv1_1) and (dstImg_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1)) or ((brmerge_i_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, srcImg_rows_V_empty_n, srcImg_cols_V_empty_n)
    begin
                ap_block_state1 <= ((srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state49_pp0_stage0_iter46_assign_proc : process(dstImg_data_stream_V_full_n, or_cond_i_reg_728_pp0_iter45_reg)
    begin
                ap_block_state49_pp0_stage0_iter46 <= ((or_cond_i_reg_728_pp0_iter45_reg = ap_const_lv1_1) and (dstImg_data_stream_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter2_assign_proc : process(srcImg_data_stream_V_empty_n, brmerge_i_reg_718_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((brmerge_i_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_411_p2)
    begin
        if ((exitcond_fu_411_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond1_fu_361_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45)
    begin
        if (((ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    brmerge1_i_fu_579_p2 <= (icmp_reg_679 or brmerge_i_reg_718_pp0_iter45_reg);
    brmerge_i_fu_438_p2 <= (rev_reg_674 or rev1_fu_432_p2);
    buff_A_val_0_address0 <= tmp_87_i_fu_405_p1(10 - 1 downto 0);
    buff_A_val_0_address1 <= tmp_87_i_reg_684_pp0_iter1_reg(10 - 1 downto 0);

    buff_A_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_0_ce0 <= ap_const_logic_1;
        else 
            buff_A_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_A_val_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_0_ce1 <= ap_const_logic_1;
        else 
            buff_A_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_A_val_0_we1_assign_proc : process(ap_enable_reg_pp0_iter2, brmerge_i_reg_718_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((brmerge_i_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_0_we1 <= ap_const_logic_1;
        else 
            buff_A_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_val_1_address0 <= tmp_87_i_fu_405_p1(10 - 1 downto 0);

    buff_A_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_1_ce0 <= ap_const_logic_1;
        else 
            buff_A_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_A_val_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_1_ce1 <= ap_const_logic_1;
        else 
            buff_A_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_A_val_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_89_i_reg_700, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_89_i_reg_700 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_1_we1 <= ap_const_logic_1;
        else 
            buff_A_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_val_2_address0 <= tmp_87_i_reg_684(10 - 1 downto 0);
    buff_A_val_2_address1 <= tmp_87_i_reg_684_pp0_iter1_reg(10 - 1 downto 0);

    buff_A_val_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_2_ce0 <= ap_const_logic_1;
        else 
            buff_A_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_A_val_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_2_ce1 <= ap_const_logic_1;
        else 
            buff_A_val_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_A_val_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_89_i_reg_700, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_89_i_reg_700 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_A_val_2_we0 <= ap_const_logic_1;
        else 
            buff_A_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_C_val_0_0_1_fu_539_p3 <= 
        buff_C_val_0_0_2_fu_154 when (tmp_89_i_reg_700_pp0_iter2_reg(0) = '1') else 
        buff_C_val_0_0_fu_138;
    buff_C_val_1_0_1_fu_489_p3 <= 
        buff_C_val_1_0_fu_134 when (tmp_89_i_reg_700_pp0_iter1_reg(0) = '1') else 
        buff_C_val_1_1_fu_142;
    buff_C_val_2_0_1_fu_532_p3 <= 
        buff_A_val_2_q1 when (tmp_89_i_reg_700_pp0_iter2_reg(0) = '1') else 
        buff_C_val_2_0_2_fu_150;
    col_fu_416_p2 <= std_logic_vector(unsigned(col_assign_reg_265) + unsigned(ap_const_lv13_1));
        cols_V_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcImg_cols_V_dout),12));


    dstImg_data_stream_V_blk_n_assign_proc : process(dstImg_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter46, or_cond_i_reg_728_pp0_iter45_reg)
    begin
        if (((or_cond_i_reg_728_pp0_iter45_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))) then 
            dstImg_data_stream_V_blk_n <= dstImg_data_stream_V_full_n;
        else 
            dstImg_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dstImg_data_stream_V_din <= 
        Temp_f2_reg_767 when (sel_tmp1_fu_589_p2(0) = '1') else 
        ap_const_lv32_0;

    dstImg_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter46, or_cond_i_reg_728_pp0_iter45_reg, ap_block_pp0_stage0_11001)
    begin
        if (((or_cond_i_reg_728_pp0_iter45_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dstImg_data_stream_V_write <= ap_const_logic_1;
        else 
            dstImg_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_361_p2 <= "1" when (row_i_reg_254 = tmp_7_reg_655) else "0";
    exitcond_fu_411_p2 <= "1" when (col_assign_reg_265 = tmp_4_reg_650) else "0";

    grp_fu_314_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_314_ce <= ap_const_logic_1;
        else 
            grp_fu_314_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_320_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_320_ce <= ap_const_logic_1;
        else 
            grp_fu_320_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_320_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_92_i_reg_737),32));


    grp_fu_324_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_324_ce <= ap_const_logic_1;
        else 
            grp_fu_324_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_324_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_95_i_fu_558_p2),32));


    grp_fu_328_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_328_ce <= ap_const_logic_1;
        else 
            grp_fu_328_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_pown_generic_float_s_fu_276_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_pown_generic_float_s_fu_276_ap_ce <= ap_const_logic_1;
        else 
            grp_pown_generic_float_s_fu_276_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_pown_generic_float_s_fu_276_ap_start <= grp_pown_generic_float_s_fu_276_ap_start_reg;

    grp_pown_generic_float_s_fu_295_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_pown_generic_float_s_fu_295_ap_ce <= ap_const_logic_1;
        else 
            grp_pown_generic_float_s_fu_295_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_pown_generic_float_s_fu_295_ap_start <= grp_pown_generic_float_s_fu_295_ap_start_reg;
    icmp1_fu_453_p2 <= "0" when (tmp_66_fu_443_p4 = ap_const_lv12_0) else "1";
    icmp_fu_399_p2 <= "1" when (tmp_fu_389_p4 = ap_const_lv12_0) else "0";

    internal_ap_ready_assign_proc : process(exitcond1_fu_361_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond1_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_i_fu_465_p2 <= (tmp_99_i_fu_459_p2 and tmp_86_i_reg_669);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev1_fu_432_p2 <= (ult1_fu_427_p2 xor ap_const_lv1_1);
    rev_fu_383_p2 <= (ult_fu_378_p2 xor ap_const_lv1_1);
    row_fu_366_p2 <= std_logic_vector(unsigned(row_i_reg_254) + unsigned(ap_const_lv13_1));
        rows_V_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcImg_rows_V_dout),12));

    sel_tmp1_fu_589_p2 <= (sel_tmp_fu_583_p2 and icmp1_reg_723_pp0_iter45_reg);
    sel_tmp_fu_583_p2 <= (brmerge1_i_fu_579_p2 xor ap_const_lv1_1);

    srcImg_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, srcImg_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcImg_cols_V_blk_n <= srcImg_cols_V_empty_n;
        else 
            srcImg_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcImg_cols_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, srcImg_rows_V_empty_n, srcImg_cols_V_empty_n)
    begin
        if ((not(((srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcImg_cols_V_read <= ap_const_logic_1;
        else 
            srcImg_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    srcImg_data_stream_V_blk_n_assign_proc : process(srcImg_data_stream_V_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, brmerge_i_reg_718_pp0_iter1_reg)
    begin
        if (((brmerge_i_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            srcImg_data_stream_V_blk_n <= srcImg_data_stream_V_empty_n;
        else 
            srcImg_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcImg_data_stream_V_read_assign_proc : process(ap_enable_reg_pp0_iter2, brmerge_i_reg_718_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((brmerge_i_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcImg_data_stream_V_read <= ap_const_logic_1;
        else 
            srcImg_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    srcImg_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, srcImg_rows_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcImg_rows_V_blk_n <= srcImg_rows_V_empty_n;
        else 
            srcImg_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcImg_rows_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, srcImg_rows_V_empty_n, srcImg_cols_V_empty_n)
    begin
        if ((not(((srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcImg_rows_V_read <= ap_const_logic_1;
        else 
            srcImg_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_349_p2 <= std_logic_vector(unsigned(tmp_83_cast_i_cast_fu_341_p1) + unsigned(ap_const_lv13_1));
    tmp_66_fu_443_p4 <= col_assign_reg_265(12 downto 1);
    tmp_7_fu_355_p2 <= std_logic_vector(unsigned(tmp_84_cast_i_cast_fu_345_p1) + unsigned(ap_const_lv13_1));
    tmp_83_cast_i_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_V_fu_337_p1),13));
    tmp_84_cast_i_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_V_fu_333_p1),13));
    tmp_86_i_fu_372_p2 <= "0" when (row_i_reg_254 = ap_const_lv13_0) else "1";
    tmp_87_i_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_reg_265),64));
    tmp_89_i_fu_422_p2 <= "1" when (unsigned(col_assign_reg_265) < unsigned(tmp_83_cast_i_cast_reg_639)) else "0";
    tmp_90_cast_i_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buff_C_val_1_0_1_fu_489_p3),9));
    tmp_91_cast_i_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buff_C_val_1_1_1_fu_146),9));
    tmp_92_i_fu_504_p2 <= std_logic_vector(unsigned(tmp_90_cast_i_fu_496_p1) - unsigned(tmp_91_cast_i_fu_500_p1));
    tmp_93_cast_i_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buff_C_val_0_0_fu_138),9));
    tmp_94_cast_i_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buff_C_val_2_0_2_fu_150),9));
    tmp_95_i_fu_558_p2 <= std_logic_vector(unsigned(tmp_93_cast_i_fu_550_p1) - unsigned(tmp_94_cast_i_fu_554_p1));
    tmp_99_i_fu_459_p2 <= "0" when (col_assign_reg_265 = ap_const_lv13_0) else "1";
    tmp_fu_389_p4 <= row_i_reg_254(12 downto 1);
    ult1_fu_427_p2 <= "1" when (unsigned(col_assign_reg_265) < unsigned(tmp_83_cast_i_cast_reg_639)) else "0";
    ult_fu_378_p2 <= "1" when (unsigned(row_i_reg_254) < unsigned(tmp_84_cast_i_cast_reg_645)) else "0";
end behav;
