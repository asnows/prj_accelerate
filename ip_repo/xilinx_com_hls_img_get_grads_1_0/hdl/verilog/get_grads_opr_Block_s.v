// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module get_grads_opr_Block_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcImg_rows_V_dout,
        srcImg_rows_V_empty_n,
        srcImg_rows_V_read,
        srcImg_cols_V_dout,
        srcImg_cols_V_empty_n,
        srcImg_cols_V_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [9:0] srcImg_rows_V_dout;
input   srcImg_rows_V_empty_n;
output   srcImg_rows_V_read;
input  [10:0] srcImg_cols_V_dout;
input   srcImg_cols_V_empty_n;
output   srcImg_cols_V_read;
output  [12:0] ap_return_0;
output  [12:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcImg_rows_V_read;
reg srcImg_cols_V_read;
reg[12:0] ap_return_0;
reg[12:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcImg_rows_V_blk_n;
reg    srcImg_cols_V_blk_n;
reg    ap_block_state1;
wire  signed [11:0] rows_V_fu_40_p1;
wire  signed [11:0] cols_V_fu_48_p1;
wire   [12:0] tmp_cast_out_fu_44_p1;
wire   [12:0] tmp_cast_out_17_fu_52_p1;
reg   [12:0] ap_return_0_preg;
reg   [12:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 13'd0;
#0 ap_return_1_preg = 13'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
        ap_return_0_preg[1] <= 1'b0;
        ap_return_0_preg[2] <= 1'b0;
        ap_return_0_preg[3] <= 1'b0;
        ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
        ap_return_0_preg[10] <= 1'b0;
        ap_return_0_preg[11] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[11 : 0] <= tmp_cast_out_fu_44_p1[11 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
        ap_return_1_preg[11] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[11 : 0] <= tmp_cast_out_17_fu_52_p1[11 : 0];
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = tmp_cast_out_fu_44_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = tmp_cast_out_17_fu_52_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        srcImg_cols_V_blk_n = srcImg_cols_V_empty_n;
    end else begin
        srcImg_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcImg_cols_V_read = 1'b1;
    end else begin
        srcImg_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        srcImg_rows_V_blk_n = srcImg_rows_V_empty_n;
    end else begin
        srcImg_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        srcImg_rows_V_read = 1'b1;
    end else begin
        srcImg_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (srcImg_cols_V_empty_n == 1'b0) | (srcImg_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign cols_V_fu_48_p1 = $signed(srcImg_cols_V_dout);

assign rows_V_fu_40_p1 = $signed(srcImg_rows_V_dout);

assign tmp_cast_out_17_fu_52_p1 = $unsigned(cols_V_fu_48_p1);

assign tmp_cast_out_fu_44_p1 = $unsigned(rows_V_fu_40_p1);

always @ (posedge ap_clk) begin
    ap_return_0_preg[12] <= 1'b0;
    ap_return_1_preg[12] <= 1'b0;
end

endmodule //get_grads_opr_Block_s
