-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_cpy_opr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    srcImg_rows_V_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    srcImg_rows_V_empty_n : IN STD_LOGIC;
    srcImg_rows_V_read : OUT STD_LOGIC;
    srcImg_cols_V_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    srcImg_cols_V_empty_n : IN STD_LOGIC;
    srcImg_cols_V_read : OUT STD_LOGIC;
    srcImg_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    srcImg_data_stream_V_empty_n : IN STD_LOGIC;
    srcImg_data_stream_V_read : OUT STD_LOGIC;
    dstImg_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dstImg_data_stream_V_full_n : IN STD_LOGIC;
    dstImg_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of img_cpy_opr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal srcImg_rows_V_blk_n : STD_LOGIC;
    signal srcImg_cols_V_blk_n : STD_LOGIC;
    signal srcImg_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dstImg_data_stream_V_blk_n : STD_LOGIC;
    signal tmp_fu_144_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_174 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_1_fu_148_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_reg_179 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_fu_157_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal y_reg_187 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal x_fu_168_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal y_i_reg_122 : STD_LOGIC_VECTOR (11 downto 0);
    signal x_i_reg_133 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_152_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x_i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                x_i_reg_133 <= ap_const_lv12_0;
            elsif ((not((((exitcond_fu_163_p2 = ap_const_lv1_0) and (dstImg_data_stream_V_full_n = ap_const_logic_0)) or ((exitcond_fu_163_p2 = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x_i_reg_133 <= x_fu_168_p2;
            end if; 
        end if;
    end process;

    y_i_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_163_p2 = ap_const_lv1_0) and (dstImg_data_stream_V_full_n = ap_const_logic_0)) or ((exitcond_fu_163_p2 = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_i_reg_122 <= y_reg_187;
            elsif ((not(((real_start = ap_const_logic_0) or (srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_i_reg_122 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_1_reg_179 <= tmp_1_fu_148_p1;
                tmp_reg_174 <= tmp_fu_144_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                y_reg_187 <= y_fu_157_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, srcImg_rows_V_empty_n, srcImg_cols_V_empty_n, srcImg_data_stream_V_empty_n, dstImg_data_stream_V_full_n, ap_CS_fsm_state3, exitcond_fu_163_p2, ap_CS_fsm_state2, exitcond1_fu_152_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_152_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((exitcond_fu_163_p2 = ap_const_lv1_0) and (dstImg_data_stream_V_full_n = ap_const_logic_0)) or ((exitcond_fu_163_p2 = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_163_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((exitcond_fu_163_p2 = ap_const_lv1_0) and (dstImg_data_stream_V_full_n = ap_const_logic_0)) or ((exitcond_fu_163_p2 = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, srcImg_rows_V_empty_n, srcImg_cols_V_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(srcImg_data_stream_V_empty_n, dstImg_data_stream_V_full_n, exitcond_fu_163_p2)
    begin
                ap_block_state3 <= (((exitcond_fu_163_p2 = ap_const_lv1_0) and (dstImg_data_stream_V_full_n = ap_const_logic_0)) or ((exitcond_fu_163_p2 = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond1_fu_152_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_152_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    dstImg_data_stream_V_blk_n_assign_proc : process(dstImg_data_stream_V_full_n, ap_CS_fsm_state3, exitcond_fu_163_p2)
    begin
        if (((exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dstImg_data_stream_V_blk_n <= dstImg_data_stream_V_full_n;
        else 
            dstImg_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dstImg_data_stream_V_din <= srcImg_data_stream_V_dout;

    dstImg_data_stream_V_write_assign_proc : process(srcImg_data_stream_V_empty_n, dstImg_data_stream_V_full_n, ap_CS_fsm_state3, exitcond_fu_163_p2)
    begin
        if ((not((((exitcond_fu_163_p2 = ap_const_lv1_0) and (dstImg_data_stream_V_full_n = ap_const_logic_0)) or ((exitcond_fu_163_p2 = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dstImg_data_stream_V_write <= ap_const_logic_1;
        else 
            dstImg_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_152_p2 <= "1" when (y_i_reg_122 = tmp_1_reg_179) else "0";
    exitcond_fu_163_p2 <= "1" when (x_i_reg_133 = tmp_reg_174) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_152_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_152_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    srcImg_cols_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, srcImg_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcImg_cols_V_blk_n <= srcImg_cols_V_empty_n;
        else 
            srcImg_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcImg_cols_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, srcImg_rows_V_empty_n, srcImg_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcImg_cols_V_read <= ap_const_logic_1;
        else 
            srcImg_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    srcImg_data_stream_V_blk_n_assign_proc : process(srcImg_data_stream_V_empty_n, ap_CS_fsm_state3, exitcond_fu_163_p2)
    begin
        if (((exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            srcImg_data_stream_V_blk_n <= srcImg_data_stream_V_empty_n;
        else 
            srcImg_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcImg_data_stream_V_read_assign_proc : process(srcImg_data_stream_V_empty_n, dstImg_data_stream_V_full_n, ap_CS_fsm_state3, exitcond_fu_163_p2)
    begin
        if ((not((((exitcond_fu_163_p2 = ap_const_lv1_0) and (dstImg_data_stream_V_full_n = ap_const_logic_0)) or ((exitcond_fu_163_p2 = ap_const_lv1_0) and (srcImg_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            srcImg_data_stream_V_read <= ap_const_logic_1;
        else 
            srcImg_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    srcImg_rows_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, srcImg_rows_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcImg_rows_V_blk_n <= srcImg_rows_V_empty_n;
        else 
            srcImg_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcImg_rows_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, srcImg_rows_V_empty_n, srcImg_cols_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (srcImg_cols_V_empty_n = ap_const_logic_0) or (srcImg_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            srcImg_rows_V_read <= ap_const_logic_1;
        else 
            srcImg_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

        tmp_1_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcImg_rows_V_dout),12));

        tmp_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(srcImg_cols_V_dout),12));

    x_fu_168_p2 <= std_logic_vector(unsigned(x_i_reg_133) + unsigned(ap_const_lv12_1));
    y_fu_157_p2 <= std_logic_vector(unsigned(y_i_reg_122) + unsigned(ap_const_lv12_1));
end behav;
